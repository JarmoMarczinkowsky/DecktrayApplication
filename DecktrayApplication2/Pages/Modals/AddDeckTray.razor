<div class="myModal">

    <div class="myForm">
        <div class="form-group">
            <label for="amountOfRacks">Amount of racks:</label>
            <input type="number" id="amountOfRacks" value="1" min="0" max="100" @onchange="numberChange" />
        </div>
        <div class="form-group">
            <label for="colorRackPicker">Color picker:</label>
            <input type="color" id="colorRackPicker" value="#FF0000" />
        </div>
        <div class="form-group">
            <label for="alignSloths">Align sloths:</label>
            <select id="alignSloth" style="width:80px;height:30px;">
                <option>Top</option>
                <option>Center</option>
                <option>Bottom</option>
            </select>
        </div>
    </div>

    <div class="previewDecktray testing">
        <div class="outsideDeckTray" id="previewDecktrayOutline">
            <div class="lhDeckTray" id="previewDecktray">
                @for (int i = 0; i < inputNumber; i++)
                {
                    double calcAmountOfRacks = Math.Round(Double.Parse("100") / Double.Parse($"{inputNumber}"), 5);
                    calcAmountOfRacks = Double.Parse(calcAmountOfRacks.ToString().Replace(",", "."));

                    <div id="previewRack_@i" class="previewRack" onclick="ClickPreviewRack(this.id, this.parentNode.id)" style="margin-left:-1px;width:inherit;height:@calcAmountOfRacks%;border:1px solid black;border-top: none;"></div>
                }
            </div>
            <div class="trapezoid"></div>
        </div>
    </div>
</div>
<button @onclick="clickedOk">Ok</button>
<button @onclick="clickedCancel">Cancel</button>

<style>
    .myModal {
        display: flex;
        justify-content: space-between;
    }

    .myForm {
        width: 250px;
    }

    .form-group {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }

    .form-group input {
        height: 30px;
        width: 80px;
    }

    .previewDecktray {
        margin-left: 10px;
        width: 250px;
        height: 250px;
        background: lightgray;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }
    string ThisIsATest { get; set; } = "test1";

    const float lengthOfDecktray = 175;
    float lengthOfRack;

    short inputNumber = 1;
    float test;

    Dictionary<string, string> dictTest = new Dictionary<string, string>
    {
        { "Test1", "Test1.1" },
        { "Test2", "Test2.2" }
    };

    private void numberChange(ChangeEventArgs e)
    {
        string myNumber = e.Value.ToString();
        inputNumber = short.Parse(myNumber);
        short minRackCount = 0;
        short maxRackCount = 10;

        if (inputNumber < minRackCount)
        {
            inputNumber = minRackCount;
        }
        else if (inputNumber > maxRackCount)
        {
            inputNumber = maxRackCount;
        }

        Console.WriteLine($"racks: {inputNumber}");
    }

    public string RackSize()
    {
        lengthOfRack = 100 / inputNumber;

        Console.WriteLine(lengthOfRack);
        return lengthOfRack.ToString() + "%";
    }

    public void clickedOk()
    {
        dictTest.Add("RackAmount", inputNumber.ToString());

        BlazoredModal.CloseAsync(ModalResult.Ok($"Form was submitted succesfully"));
        //foreach (KeyValuePair<string, string> myTest in dictTest)
        //{
        //    if (dictTest.ContainsKey("RackAmount"))
        //    {
        //        Console.WriteLine($"RackAmount is: {myTest.Value}");
        //    }
        //}

    }

    private void clickedCancel()
    {
        BlazoredModal.CancelAsync();
    }
}