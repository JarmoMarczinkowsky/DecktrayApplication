@page "/"

<div class="wrapper">
    <div class="cubes">
        <div class="leftSide">
            <div class="leftUpSide">
                <div class="buttons">
                    <button @onclick="AddNewDeck">
                        Add
                    </button>
                    <button @onclick="DeleteDeck">
                        Delete
                    </button>
                </div>
                <div class="leftUpCube sideCube">
                    <p class="centerText textCube">Rack</p>
                </div>
            </div>
            <div class="leftDownSide" style="margin-top:25px;">
                <div class="buttons">
                    <button @onclick="AddNewDeck">
                        Add
                    </button>
                    <button @onclick="DeleteDeck">
                        Delete
                    </button>
                </div>
                <div class="leftDownCube sideCube">
                    <p class="centerText textCube">Decktrays</p>
                    <input type="number" @onchange="numberChange" min="1" max="10" value="1" id="numberGen" />
                </div>
            </div>
        </div>
        <div class="rightSide">
            <div class="liquidHandler">
                @for (int i = 0; i < amountOfDecktrays; i++)
                {
                    <div class="lhDeckTray" id="decktray_@i">
                        <div class="trapezoid"></div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --buttonGray: rgb(160, 174, 192);
        --otherGray: #EBEBEB;
        --defaultGray: lightGray;
    }

    .cubes {
        display: flex;
        align-items: center;
    }

    .leftSide {
        width: 300px;
    }

    .rightSide {
        width: 800px;
        height: 450px;
        background: var(--otherGray);
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);
    }

    button {
        width: 75px;
        height: 35px;
        border-radius: 5px;
        border: none;
        font-weight: 600;
        background-color: var(--defaultGray);
    }

    .sideCube {
        margin: 10px 0;
        width: 275px;
        height: 275px;
        background: var(--defaultGray);
        border-radius: 15px;
        border: 1px solid black;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    p.centerText {
        text-align: center;
    }

    p.textCube {
        border-radius: 15px 15px 0 0;
        border-bottom: 1px solid black;
        font-weight: 600;
        color: #2b6cb0;
    }

    .liquidHandler {
        width: 700px;
        height: 250px;
        background: darkGray;
        display: flex;
        align-items: center;
        box-sizing: border-box;
        padding: 3px 60px 25px 60px;
    }

        .liquidHandler .lhDeckTray {
            height: 175px;
            width: 50px;
            border: 1px solid black;
            margin: 0 2px;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
        }

            .liquidHandler .lhDeckTray:hover {
                background: red;
            }

                .liquidHandler .lhDeckTray:hover .trapezoid {
                    background: inherit;
                }

    .trapezoid {
        width: 37px;
        height: 23px;
        border: 1px solid black;
        border-top: none;
        transform: perspective(7.7px) rotateX(-10deg);
        margin: -27.5px 5.5px;
    }
</style>

@code {
    public void AddNewDeck()
    {
        Console.WriteLine("Hello");
    }

    public void DeleteDeck()
    {
        //
    }

    float amountOfDecktrays;

    private void numberChange(ChangeEventArgs e)
    {
        string myNumber = e.Value.ToString();
        amountOfDecktrays = float.Parse(myNumber);
        Console.WriteLine(myNumber);
    }
}